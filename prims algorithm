INF = float('inf')

def prim_mst(graph):
    n = len(graph)
    key = [INF] * n
    parent = [-1] * n
    key[0] = 0
    mst_set = [False] * n
    total_weight = 0
    edges = []
    
    for _ in range(n):
        u = min_key(key, mst_set)
        mst_set[u] = True
        total_weight += key[u]  # Add the edge weight to the total weight
        if parent[u] != -1:
            edges.append((parent[u], u, key[u]))  # Store the edge and its weight
        for v in range(n):
            if 0 < graph[u][v] < key[v] and not mst_set[v]:
                key[v] = graph[u][v]
                parent[v] = u
    
    return edges, total_weight

def min_key(key, mst_set):
    min_val = INF
    min_idx = -1
    for v in range(len(key)):
        if key[v] < min_val and not mst_set[v]:
            min_val = key[v]
            min_idx = v
    return min_idx

# Sample Input and Output
graph = [[0, 0, 3, 0, 0],    
        [0, 0, 10, 4, 0],    
        [3, 10, 0, 2, 6],    
        [0, 4, 2, 0, 1],    
        [0, 0, 6, 1, 0]]   

edges, total_weight = prim_mst(graph)
print("Edge\tWeight")
for edge in edges:
    print(f"{edge[0]} - {edge[1]}\t{edge[2]}")
print("Total Cost of Minimum Spanning Tree:", total_weight)
